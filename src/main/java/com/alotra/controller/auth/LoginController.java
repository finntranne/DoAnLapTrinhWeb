package com.alotra.controller.auth;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.alotra.service.user.PasswordResetTokenService; // ‚úÖ IMPORT SERVICE

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller
public class LoginController {

	private static final Logger logger = LoggerFactory.getLogger(LoginController.class);

	@Autowired
	private PasswordResetTokenService resetTokenService; // ‚úÖ INJECT SERVICE

	@GetMapping("/login")
	public String showLoginPage(Authentication authentication) {
		if (authentication != null && authentication.isAuthenticated()
				&& !authentication.getPrincipal().equals("anonymousUser")) {
			String redirectUrl = determineTargetUrl(authentication);
			return "redirect:" + redirectUrl;
		}
		return "auth/login";
	}

	@GetMapping("/reset-password")
	public String showResetPasswordPage(@RequestParam("token") String token, Model model,
			RedirectAttributes redirectAttributes) {

		logger.info("üîó Reset password request with token: {}", token);

		// ‚úÖ S·ª¨ D·ª§NG TOKEN SERVICE ƒê·ªÇ VALIDATE V√Ä TR√çCH XU·∫§T EMAIL
		String email = resetTokenService.validateAndExtractEmail(token);

		if (email == null) {
			logger.warn("‚ùå Invalid or expired token");
			redirectAttributes.addFlashAttribute("errorMessage",
					"ƒê∆∞·ªùng link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu link m·ªõi.");
			return "redirect:/login";
		}

		// Token h·ª£p l·ªá - Mask email v√† truy·ªÅn v√†o view
		String maskedEmail = maskEmail(email);

		logger.info("‚úÖ Valid token for user: {}", maskedEmail);

		model.addAttribute("token", token);
		model.addAttribute("maskedEmail", maskedEmail);
		model.addAttribute("fullEmail", email); // ƒê·ªÉ hi·ªÉn th·ªã tooltip n·∫øu c·∫ßn

		return "auth/reset-password";
	}

	@GetMapping("/auth/403")
	public String accessDenied() {
		return "auth/403";
	}

	/**
	 * Mask email ƒë·ªÉ b·∫£o m·∫≠t V√≠ d·ª•: - nguyentrilam@gmail.com -> n***m@gmail.com -
	 * abc@example.com -> a***c@example.com - xy@test.com -> x***y@test.com
	 */
	private String maskEmail(String email) {
		if (email == null || !email.contains("@")) {
			return email;
		}

		String[] parts = email.split("@");
		String localPart = parts[0]; // Ph·∫ßn tr∆∞·ªõc @
		String domain = parts[1]; // Ph·∫ßn sau @

		// N·∫øu localPart qu√° ng·∫Øn (1-2 k√Ω t·ª±)
		if (localPart.length() <= 2) {
			return localPart.charAt(0) + "***@" + domain;
		}

		// L·∫•y k√Ω t·ª± ƒë·∫ßu v√† cu·ªëi, gi·ªØa thay b·∫±ng ***
		char firstChar = localPart.charAt(0);
		char lastChar = localPart.charAt(localPart.length() - 1);

		return firstChar + "***" + lastChar + "@" + domain;
	}

	private String determineTargetUrl(Authentication authentication) {
		Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();

		if (authorities.stream().anyMatch(a -> a.getAuthority().equals("ADMIN"))) {
			return "/admin/dashboard";
		}
		if (authorities.stream().anyMatch(a -> a.getAuthority().equals("VENDOR"))) {
			return "/vendor/dashboard";
		}
		if (authorities.stream().anyMatch(a -> a.getAuthority().equals("CUSTOMER"))) {
			return "/";
		}

		return "/";
	}
}